const builtInThemes = {
  "andromeeda": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "aurora-x": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "ayu-dark": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "catppuccin-frappe": [
    "#e78284",
    "#ef9f76",
    "#e5c890",
    "#a6d189",
    "#85c1dc",
    "#ca9ee6",
    "#ea999c"
  ],
  "catppuccin-latte": [
    "#d20f39",
    "#fe640b",
    "#df8e1d",
    "#40a02b",
    "#209fb5",
    "#8839ef",
    "#e64553"
  ],
  "catppuccin-macchiato": [
    "#ed8796",
    "#f5a97f",
    "#eed49f",
    "#a6da95",
    "#7dc4e4",
    "#c6a0f6",
    "#ee99a0"
  ],
  "catppuccin-mocha": [
    "#f38ba8",
    "#fab387",
    "#f9e2af",
    "#a6e3a1",
    "#74c7ec",
    "#cba6f7",
    "#eba0ac"
  ],
  "dark-plus": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "dracula": [
    "#F8F8F2",
    "#FF79C6",
    "#8BE9FD",
    "#50FA7B",
    "#BD93F9",
    "#FFB86C",
    "#FF5555"
  ],
  "dracula-soft": [
    "#f6f6f4",
    "#f286c4",
    "#97e1f1",
    "#62e884",
    "#bf9eee",
    "#FFB86C",
    "#ee6666"
  ],
  "everforest-dark": [
    "#e67e80",
    "#dbbc7f",
    "#a7c080",
    "#7fbbb3",
    "#e69875",
    "#d699b6",
    "#859289"
  ],
  "everforest-light": [
    "#f85552",
    "#dfa000",
    "#8da101",
    "#3a94c5",
    "#f57d26",
    "#df69ba",
    "#939f91"
  ],
  "github-dark": [
    "#79b8ff",
    "#ffab70",
    "#b392f0",
    "#79b8ff",
    "#ffab70",
    "#b392f0",
    "rgba(255, 18, 18, 0.8)"
  ],
  "github-dark-default": [
    "#79c0ff",
    "#56d364",
    "#e3b341",
    "#ffa198",
    "#ff9bce",
    "#d2a8ff",
    "#7d8590"
  ],
  "github-dark-dimmed": [
    "#6cb6ff",
    "#6bc46d",
    "#daaa3f",
    "#ff938a",
    "#fc8dc7",
    "#dcbdfb",
    "#768390"
  ],
  "github-dark-high-contrast": [
    "#91cbff",
    "#4ae168",
    "#f7c843",
    "#ffb1af",
    "#ffadd4",
    "#dbb7ff",
    "#f0f3f6"
  ],
  "github-light": [
    "#005cc5",
    "#e36209",
    "#5a32a3",
    "#005cc5",
    "#e36209",
    "#5a32a3",
    "rgba(255, 18, 18, 0.8)"
  ],
  "github-light-default": [
    "#0969da",
    "#1a7f37",
    "#9a6700",
    "#cf222e",
    "#bf3989",
    "#8250df",
    "#656d76"
  ],
  "github-light-high-contrast": [
    "#0349b4",
    "#055d20",
    "#744500",
    "#a0111f",
    "#971368",
    "#622cbc",
    "#0e1116"
  ],
  "gruvbox-dark-hard": [
    "#b16286",
    "#458588",
    "#689d6a",
    "#98971a",
    "#d79921",
    "#d65d0e",
    "#cc241d"
  ],
  "gruvbox-dark-medium": [
    "#b16286",
    "#458588",
    "#689d6a",
    "#98971a",
    "#d79921",
    "#d65d0e",
    "#cc241d"
  ],
  "gruvbox-dark-soft": [
    "#b16286",
    "#458588",
    "#689d6a",
    "#98971a",
    "#d79921",
    "#d65d0e",
    "#cc241d"
  ],
  "gruvbox-light-hard": [
    "#b16286",
    "#458588",
    "#689d6a",
    "#98971a",
    "#d79921",
    "#d65d0e",
    "#cc241d"
  ],
  "gruvbox-light-medium": [
    "#b16286",
    "#458588",
    "#689d6a",
    "#98971a",
    "#d79921",
    "#d65d0e",
    "#cc241d"
  ],
  "gruvbox-light-soft": [
    "#b16286",
    "#458588",
    "#689d6a",
    "#98971a",
    "#d79921",
    "#d65d0e",
    "#cc241d"
  ],
  "houston": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "kanagawa-dragon": [
    "#8992A7",
    "#B6927B",
    "#8BA4B0",
    "#A292A3",
    "#C4B28A",
    "#8EA4A2",
    "#C4746E"
  ],
  "kanagawa-lotus": [
    "#624C83",
    "#CC6D00",
    "#4D699B",
    "#B35B79",
    "#77713F",
    "#597B75",
    "#D9A594"
  ],
  "kanagawa-wave": [
    "#957FB8",
    "#FFA066",
    "#7E9CD8",
    "#D27E99",
    "#E6C384",
    "#7AA89F",
    "#FF5D62"
  ],
  "laserwave": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "light-plus": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "material-theme": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "material-theme-darker": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "material-theme-lighter": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "material-theme-ocean": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "material-theme-palenight": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "min-dark": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "min-light": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "monokai": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "night-owl": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "nord": [
    "#8fbcbb",
    "#88c0d0",
    "#81a1c1",
    "#5e81ac",
    "#8fbcbb",
    "#88c0d0",
    "#bf616a"
  ],
  "one-dark-pro": [
    "#d19a66",
    "#c678dd",
    "#56b6c2",
    "rgba(255, 18, 18, 0.8)"
  ],
  "one-light": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "plastic": [
    "#A9B2C3",
    "#61AFEF",
    "#E5C07B",
    "#E06C75",
    "#98C379",
    "#B57EDC",
    "#D74E42"
  ],
  "poimandres": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "red": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "rose-pine": [
    "#eb6f9280",
    "#31748f80",
    "#f6c17780",
    "#9ccfd880",
    "#ebbcba80",
    "#c4a7e780",
    "rgba(255, 18, 18, 0.8)"
  ],
  "rose-pine-dawn": [
    "#b4637a80",
    "#28698380",
    "#ea9d3480",
    "#56949f80",
    "#d7827e80",
    "#907aa980",
    "rgba(255, 18, 18, 0.8)"
  ],
  "rose-pine-moon": [
    "#eb6f9280",
    "#3e8fb080",
    "#f6c17780",
    "#9ccfd880",
    "#ea9a9780",
    "#c4a7e780",
    "rgba(255, 18, 18, 0.8)"
  ],
  "slack-dark": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "slack-ochin": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "snazzy-light": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "solarized-dark": [
    "#cdcdcdff",
    "#b58900ff",
    "#d33682ff",
    "rgba(255, 18, 18, 0.8)"
  ],
  "solarized-light": [
    "#0431FA",
    "#319331",
    "#7B3814",
    "rgba(255, 18, 18, 0.8)"
  ],
  "synthwave-84": [
    "#FFD700",
    "#DA70D6",
    "#179FFF",
    "rgba(255, 18, 18, 0.8)"
  ],
  "tokyo-night": [
    "#698cd6",
    "#68b3de",
    "#9a7ecc",
    "#25aac2",
    "#80a856",
    "#c49a5a",
    "#db4b4b"
  ],
  "vesper": [
    "#A0A0A0",
    "#A0A0A0",
    "#A0A0A0",
    "#A0A0A0",
    "#A0A0A0",
    "#A0A0A0",
    "#FF8080"
  ],
  "vitesse-black": [
    "#5eaab5",
    "#4d9375",
    "#d4976c",
    "#d9739f",
    "#e6cc77",
    "#6394bf",
    "rgba(255, 18, 18, 0.8)"
  ],
  "vitesse-dark": [
    "#5eaab5",
    "#4d9375",
    "#d4976c",
    "#d9739f",
    "#e6cc77",
    "#6394bf",
    "rgba(255, 18, 18, 0.8)"
  ],
  "vitesse-light": [
    "#2993a3",
    "#1e754f",
    "#a65e2b",
    "#a13865",
    "#bda437",
    "#296aa3",
    "rgba(255, 18, 18, 0.8)"
  ]
};

function getEmbeddedLang(token) {
  return token.explanation?.[0].scopes.findLast((scope) => scope.scopeName.match(/^source.\w+$/))?.scopeName.split(".")[1];
}
function resolveConfig(config, lang) {
  return {
    themes: config.langs[lang]?.themes ?? config.themes,
    bracketPairs: config.langs[lang]?.bracketPairs ?? config.bracketPairs
  };
}
function escapeRegExp(string) {
  return string.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}
function shouldIgnoreToken(token, scopesAllowList, scopesDenyList) {
  if (!token.explanation)
    return true;
  const commentLastIndex = token.explanation?.[0].scopes.findLastIndex(
    (scope) => scope.scopeName.startsWith("comment.")
  ) ?? -1;
  const stringLastIndex = token.explanation?.[0].scopes.findLastIndex(
    (scope) => scope.scopeName.startsWith("string.")
  ) ?? -1;
  const embeddedLastIndex = token.explanation?.[0].scopes.findLastIndex(
    (scope) => scope.scopeName.startsWith("meta.embedded.") || scope.scopeName.startsWith("scope.embedded.") || scope.scopeName === "entity.name.type.instance.jsdoc" || scope.scopeName === "variable.other.jsdoc" || scope.scopeName === "meta.object.liquid"
  ) ?? -1;
  if (commentLastIndex > embeddedLastIndex || stringLastIndex > embeddedLastIndex) {
    return true;
  }
  if (scopesAllowList && scopesAllowList.length && !token.explanation?.some(
    (explanation) => explanation.scopes.some(
      (scope) => scopesAllowList.some(
        (allowed) => scope.scopeName === allowed || scope.scopeName.startsWith(`${allowed}.`)
      )
    )
  )) {
    return true;
  }
  if (scopesDenyList && scopesDenyList.length && token.explanation?.some(
    (explanation) => explanation.scopes.some(
      (scope) => scopesDenyList.some(
        (denied) => scope.scopeName === denied || scope.scopeName.startsWith(`${denied}.`)
      )
    )
  )) {
    return true;
  }
  return false;
}

function colorizeBracketTokens(tokens, config, shikiOptions, lang) {
  const openerStack = [];
  for (const token of tokens) {
    const embeddedLang = getEmbeddedLang(token);
    const resolvedConfig = resolveConfig(config, embeddedLang ?? lang);
    const openers = new Set(
      resolvedConfig.bracketPairs.map((pair) => pair.opener)
    );
    const closers = new Set(
      resolvedConfig.bracketPairs.map((pair) => pair.closer)
    );
    const closerToOpener = Object.fromEntries(
      resolvedConfig.bracketPairs.map((pair) => [pair.closer, pair.opener])
    );
    const pairDefinition = resolvedConfig.bracketPairs.find(
      (pair) => pair.opener === token.content.trim() || pair.closer === token.content.trim()
    );
    if (!pairDefinition || shouldIgnoreToken(
      token,
      pairDefinition.scopesAllowList,
      pairDefinition.scopesDenyList
    )) {
      continue;
    }
    if (openers.has(token.content.trim())) {
      openerStack.push(token);
    } else if (closers.has(token.content.trim())) {
      const opener = openerStack.slice().reverse().find((t) => t.content.trim() === closerToOpener[token.content.trim()]);
      if (opener) {
        while (openerStack.at(-1) !== opener) {
          const unexpected = openerStack.pop();
          if (unexpected) {
            assignColorToToken(
              unexpected,
              resolvedConfig.themes,
              shikiOptions,
              -1
            );
          }
        }
        openerStack.pop();
        assignColorToToken(
          token,
          resolvedConfig.themes,
          shikiOptions,
          openerStack.length
        );
        assignColorToToken(
          opener,
          resolvedConfig.themes,
          shikiOptions,
          openerStack.length
        );
      } else {
        assignColorToToken(token, resolvedConfig.themes, shikiOptions, -1);
      }
    }
  }
  for (const token of openerStack) {
    assignColorToToken(
      token,
      resolveConfig(config, lang).themes,
      shikiOptions,
      -1
    );
  }
}
function assignColorToToken(token, themes, shikiOptions, level) {
  if (isSingleTheme(shikiOptions)) {
    const themeName = typeof shikiOptions.theme === "string" ? shikiOptions.theme : shikiOptions.theme.name;
    token.color = getColor(themes, themeName, level);
  } else {
    const { defaultColor = "light", cssVariablePrefix = "--shiki-" } = shikiOptions;
    const styles = typeof token.htmlStyle === "string" ? {} : structuredClone(token.htmlStyle ?? {});
    for (const [colorName, theme] of Object.entries(shikiOptions.themes)) {
      const themeName = typeof theme === "string" ? theme : theme?.name;
      const cssProperty = colorName === defaultColor ? "color" : `${cssVariablePrefix}${colorName}`;
      styles[cssProperty] = getColor(themes, themeName, level);
    }
    token.htmlStyle = styles;
  }
}
function isSingleTheme(shikiOptions) {
  return "theme" in shikiOptions;
}
const DEFAULT_BRACKETS_COLORS = [
  "#FFD700",
  "#DA70D6",
  "#179FFF",
  "rgba(255, 18, 18, 0.8)"
];
function getColor(themes, themeName, level) {
  const colors = themeName == null ? DEFAULT_BRACKETS_COLORS : getThemeColors(themeName, themes) ?? getThemeColors(themeName, builtInThemes) ?? DEFAULT_BRACKETS_COLORS;
  const isUnexpected = level === -1;
  if (isUnexpected) {
    return colors[colors.length - 1];
  } else {
    return colors[level % (colors.length - 1)];
  }
}
function getThemeColors(themeName, themes) {
  if (themes[themeName])
    return themes[themeName];
  const startsWithName = Object.keys(themes).sort().reverse().find((key) => themeName.startsWith(key));
  if (startsWithName)
    return themes[startsWithName];
  return null;
}

function splitBracketTokens(rawToken, config, lang) {
  const embeddedLang = getEmbeddedLang(rawToken);
  const resolvedConfig = resolveConfig(config, embeddedLang ?? lang);
  if (resolvedConfig.bracketPairs.length === 0 || shouldIgnoreToken(rawToken)) {
    return [rawToken];
  }
  const bracketsRegExp = new RegExp(
    resolvedConfig.bracketPairs.flatMap((pair) => [pair.opener, pair.closer]).sort((a, b) => b.length - a.length).map(escapeRegExp).join("|")
  );
  const tokens = [rawToken];
  while (true) {
    const token = tokens.pop();
    if (!token)
      break;
    const match = token?.content.match(bracketsRegExp);
    if (!match) {
      tokens.push(token);
      break;
    }
    const matchIndex = match.index ?? 0;
    if (matchIndex > 0) {
      tokens.push({
        ...token,
        content: token.content.substring(0, matchIndex)
      });
    }
    tokens.push({
      ...token,
      content: match[0],
      offset: token.offset + matchIndex
    });
    if (matchIndex + match[0].length < token.content.length) {
      tokens.push({
        ...token,
        content: token.content.substring(matchIndex + match[0].length),
        offset: token.offset + matchIndex + match[0].length
      });
    } else {
      break;
    }
  }
  const explanations = rawToken.explanation ?? [];
  let currentExplanationStart = 0;
  const explanationsWithStartEnd = (explanations ?? []).map(
    (explanation, i) => {
      const start = currentExplanationStart;
      let length = explanation.content.length;
      if (explanations.length === 1) {
        length = rawToken.content.length;
      } else if (i === 0) {
        length = (rawToken.content.match(/^\s*/)?.[0].length ?? 0) + explanation.content.trimStart().length;
      } else if (i === explanations.length - 1) {
        length = explanation.content.trimEnd().length + (rawToken.content.match(/\s*$/)?.[0].length ?? 0);
      }
      currentExplanationStart += length;
      return {
        ...explanation,
        start,
        end: start + length - 1
      };
    }
  );
  for (const token of tokens) {
    const tokenStart = token.offset - rawToken.offset;
    const tokenEnd = tokenStart + token.content.length - 1;
    const overlappingExplanations = explanationsWithStartEnd.filter(
      (explanation) => (
        // token start in explanation range
        tokenStart >= explanation.start && tokenStart <= explanation.end || tokenEnd >= explanation.start && tokenEnd <= explanation.end || explanation.start >= tokenStart && explanation.start <= tokenEnd || explanation.end >= tokenStart && explanation.end <= tokenEnd
      )
    );
    token.explanation = overlappingExplanations.map(
      (exp, i) => explanations[i]
    );
  }
  return tokens;
}

const jinjaLikeBracketPairs = [
  { opener: "[", closer: "]" },
  { opener: "{", closer: "}" },
  { opener: "(", closer: ")" },
  { opener: "{{", closer: "}}" },
  { opener: "{%", closer: "%}" }
];
function transformerColorizedBrackets(options = {}) {
  const config = {
    themes: options.themes ?? {},
    bracketPairs: options.bracketPairs ?? [
      { opener: "[", closer: "]" },
      { opener: "{", closer: "}" },
      { opener: "(", closer: ")" },
      {
        opener: "<",
        closer: ">",
        scopesAllowList: [
          "punctuation.definition.typeparameters.begin.ts",
          "punctuation.definition.typeparameters.end.ts",
          "entity.name.type.instance.jsdoc"
        ]
      }
    ],
    langs: {
      html: { bracketPairs: [] },
      jinja: { bracketPairs: jinjaLikeBracketPairs },
      liquid: { bracketPairs: jinjaLikeBracketPairs },
      ...options.langs
    },
    explicitTrigger: options.explicitTrigger ?? false
  };
  const transformer = {
    name: "colorizedBrackets",
    preprocess(code, options2) {
      if (!isEnabled(config, this.options.meta?.__raw)) {
        return;
      }
      options2.includeExplanation ||= "scopeName";
    },
    tokens: function transformTokens(tokens) {
      if (!isEnabled(config, this.options.meta?.__raw)) {
        return;
      }
      const lang = this.options.lang;
      for (let lineIndex = 0; lineIndex < tokens.length; lineIndex++) {
        const line = tokens[lineIndex];
        const newLine = line.flatMap(
          (token) => splitBracketTokens(token, config, lang)
        );
        tokens[lineIndex] = newLine;
      }
      colorizeBracketTokens(tokens.flat(), config, this.options, lang);
    }
  };
  return transformer;
}
const EXPLICIT_TRIGGER_REGEX = /(^|\s)colorize-brackets($|\s)/;
function isEnabled(config, meta) {
  return !config.explicitTrigger || meta?.match(EXPLICIT_TRIGGER_REGEX) != null;
}

export { transformerColorizedBrackets };
