import { ShikiTransformer } from 'shiki';

/**
 * Colorized brackets plugin config
 *
 * @property themes - a record of theme names to bracket CSS colors; the final color is the unexpected bracket color
 * @property bracketPairs - bracket pair definitions
 * @property langs - language-specific configs that are merged with the base config
 * @property explicitTrigger - if true, the transformer only runs for code blocks with the `colorize-brackets` meta string
 */
interface TransformerColorizedBracketsOptions {
    themes: Record<string, string[]>;
    bracketPairs: BracketPair[];
    langs: Record<string, ColorizedBracketsLangConfig>;
    explicitTrigger?: boolean;
}
/**
 * Language-specific config
 *
 * @property themes - language-specific theme customizations; if not defined, it uses the theme customizations from the base config
 * @property bracketPairs - language-specific bracket pairs; if not defined, it uses the bracket from the base config
 */
interface ColorizedBracketsLangConfig {
    themes?: Record<string, string[]>;
    bracketPairs?: BracketPair[];
}
/**
 * Defines opening and closing brackets, and allowed Textmate scopes
 *
 * @property opener - the string that opens a bracket pair; multi-character strings are not yet supported
 * @property closer - the string that closes a bracket pair; multi-character strings are not yet supported
 * @property scopesAllowList - if defined, brackets will only be colored if at least 1 of their scopes matches a scope from this list
 * @property scopesDenyList - if defined, brackets will not be colored if any of their scopes match a scope from this list
 */
interface BracketPair {
    opener: string;
    closer: string;
    scopesAllowList?: string[];
    scopesDenyList?: string[];
}

/**
 * Creates a new bracket colorizer transformer
 *
 * @example basic usage
 * ```ts
 * const html = await shiki.codeToHtml(code, {
 *   lang: 'ts',
 *   theme: 'dark-plus',
 *   transformers: [transformerColorizedBrackets()],
 * });
 * ```
 *
 * @param options
 * @param options.themes - custom themes; all Shiki built-in themes are supported without additional configuration
 * @param options.bracketPairs - bracket definitions; by default [], {}, (), and <> (TS-only)
 * @param options.langs - language-specific overrides for themes and bracketPairs
 * @returns Shiki transformer
 */
declare function transformerColorizedBrackets(options?: Partial<TransformerColorizedBracketsOptions>): ShikiTransformer;

export { transformerColorizedBrackets };
