import { DefineComponent, ExtractPropTypes, ComponentOptionsMixin, PublicProps, ComponentProvideOptions } from 'vue';
declare const _default: DefineComponent<ExtractPropTypes<{
    displaying: {
        type: BooleanConstructor;
        default: undefined;
    };
    applyingPreviewStyles: {
        type: BooleanConstructor;
        default: undefined;
    };
    isAnimating: {
        type: BooleanConstructor;
        default: undefined;
    };
    src: {
        readonly type: StringConstructor;
        readonly required: true;
    };
    alt: StringConstructor;
    width: (StringConstructor | NumberConstructor)[];
    height: (StringConstructor | NumberConstructor)[];
    duration: {
        type: NumberConstructor;
        default: number;
    };
    maskBgColor: {
        type: StringConstructor;
        default: string;
    };
    maskOpacity: {
        type: NumberConstructor;
        default: number;
    };
    previewZIndex: {
        type: NumberConstructor;
        default: number;
    };
    autoZIndex: {
        type: BooleanConstructor;
        default: boolean;
    };
    previewMaxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    previewMaxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    zoomStep: {
        type: NumberConstructor;
        default: number;
    };
    zoomMin: {
        type: NumberConstructor;
        default: number;
    };
    zoomMax: {
        type: NumberConstructor;
        default: number;
    };
    dblClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    dblClickZoomTo: {
        type: NumberConstructor;
        default: number;
    };
}>, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    "update:displaying": (_value: boolean) => void;
    "update:applyingPreviewStyles": (_value: boolean) => void;
    "update:isAnimating": (_value: boolean) => void;
    displayChange: (_value: boolean) => void;
    previewStylesChange: (_value: boolean) => void;
    animatingChange: (_value: boolean) => void;
}, string, PublicProps, Readonly< ExtractPropTypes<{
    displaying: {
        type: BooleanConstructor;
        default: undefined;
    };
    applyingPreviewStyles: {
        type: BooleanConstructor;
        default: undefined;
    };
    isAnimating: {
        type: BooleanConstructor;
        default: undefined;
    };
    src: {
        readonly type: StringConstructor;
        readonly required: true;
    };
    alt: StringConstructor;
    width: (StringConstructor | NumberConstructor)[];
    height: (StringConstructor | NumberConstructor)[];
    duration: {
        type: NumberConstructor;
        default: number;
    };
    maskBgColor: {
        type: StringConstructor;
        default: string;
    };
    maskOpacity: {
        type: NumberConstructor;
        default: number;
    };
    previewZIndex: {
        type: NumberConstructor;
        default: number;
    };
    autoZIndex: {
        type: BooleanConstructor;
        default: boolean;
    };
    previewMaxWidth: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    previewMaxHeight: {
        type: (StringConstructor | NumberConstructor)[];
        default: string;
    };
    zoomStep: {
        type: NumberConstructor;
        default: number;
    };
    zoomMin: {
        type: NumberConstructor;
        default: number;
    };
    zoomMax: {
        type: NumberConstructor;
        default: number;
    };
    dblClickZoom: {
        type: BooleanConstructor;
        default: boolean;
    };
    dblClickZoomTo: {
        type: NumberConstructor;
        default: number;
    };
}>> & Readonly<{
    "onUpdate:displaying"?: ((_value: boolean) => any) | undefined;
    "onUpdate:applyingPreviewStyles"?: ((_value: boolean) => any) | undefined;
    "onUpdate:isAnimating"?: ((_value: boolean) => any) | undefined;
    onDisplayChange?: ((_value: boolean) => any) | undefined;
    onPreviewStylesChange?: ((_value: boolean) => any) | undefined;
    onAnimatingChange?: ((_value: boolean) => any) | undefined;
}>, {
    displaying: boolean;
    applyingPreviewStyles: boolean;
    isAnimating: boolean;
    duration: number;
    maskBgColor: string;
    maskOpacity: number;
    previewZIndex: number;
    autoZIndex: boolean;
    previewMaxWidth: string | number;
    previewMaxHeight: string | number;
    zoomStep: number;
    zoomMin: number;
    zoomMax: number;
    dblClickZoom: boolean;
    dblClickZoomTo: number;
}, {}, {}, {}, string, ComponentProvideOptions, true, {}, any>;
export default _default;
